{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-emma-core-src-templates-projects-query-tsx-299cfeca38268c562e75.js","mappings":"iOAkGA,EA3EoB,SAAC,GAAD,IAAGA,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,MAAhB,OAClB,QAAC,EAAAC,SAAA,IAAD,CACEC,GAAI,CACFC,SAAU,WACV,WAAY,CACVC,QAAS,KACTC,QAAS,QACTC,WAAY,SAGhBP,MAAOA,IAEP,eACEG,GAAI,CACFK,KAAM,EACNC,OAAQ,OACRL,SAAU,WACVM,IAAK,EACLC,MAAO,OACPC,EAAG,CACDC,MAAO,QACPJ,OAAQ,OACRD,KAAM,EACNM,QAAS,EACTC,QAAS,EACTX,SAAU,WACVM,IAAK,EACLC,MAAO,OACPK,OAAQ,GACRC,WAAY,uBACZC,eAAgB,OAChB,UAAW,CACTL,MAAO,QACPC,QAAS,EACTI,eAAgB,YAKtB,eACEf,GAAI,CAEF,QAAS,CACPM,OAAQ,OACRD,KAAM,EACNJ,SAAU,sBACVM,IAAK,EACLC,MAAO,OACP,QAAS,CACPP,SAAU,yBAKhB,QAAC,EAAAe,EAAD,CAAaC,QAASnB,EAAQ,QAAH,OAAqBoB,MAAOtB,EAAKuB,MAAMC,gBAAgBC,gBAAiBC,IAAI,OAEzG,QAAC,EAAAC,KAAD,CAAMC,GAAI5B,EAAK6B,KAAM,oCAAmC7B,EAAK8B,QAC3D,eACE1B,GAAI,CACF2B,gBAAiB/B,EAAKc,MACtBJ,OAAQ,OACRD,KAAM,EACNJ,SAAU,WACVM,IAAK,EACLC,MAAO,OACPK,QAAS,MAGb,eAAKb,GAAI,CAAE4B,SAAU,EAAGC,WAAY,SAAWjC,EAAKkC,SACpD,eAAK9B,GAAI,CAAE4B,SAAU,IAAMhC,EAAKmC,aCdxC,EAvDiB,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,SACZC,GAAQC,EAAAA,EAAAA,UAASF,EAASG,OAAQ,CACtCC,KAAM,CAAE9B,OAAQ,MAChBkB,GAAI,CAAElB,OAAQ,UAGhB,OAAwB,IAApB0B,EAASG,QAET,QAAC,IAAD,MACE,QAAC,KAAD,MACE,QAAC,OAAD,gBAEE,gBAAME,KAAK,MAAM,aAAW,cAA5B,MAFF,KAME,mBANF,qBAOmB,gDAPnB,sDAQE,6BARF,oFASE,QAAC,OAAD,CAAUC,KAAK,gFAAf,UATF,oCAeA,QAAC,OAAD,MACE,2BADF,KACgB,mBADhB,iDAE+C,wCAF/C,sDAGoB,+BAHpB,mBAGuD,iCAHvD,kFAKE,QAAC,OAAD,CAAUA,KAAK,gFAAf,UALF,QAgBN,QAAC,IAAD,CACEtC,GAAI,CACFG,QAAS,OACToC,oBAAqB,uCACrB/B,MAAO,SAGRyB,EAAMO,KAAI,SAAC3C,EAAO4C,GAAR,OACT,QAAC,EAAD,CAAa5C,MAAOA,EAAOC,MAAiB,IAAV2C,EAAa7C,KAAMoC,EAASS,GAAQC,IAAKV,EAASS,GAAOhB,YCrEnG,MCQe,YAA+C,IAAhBkB,EAAgB,oBAElDC,EACND,EADFE,KAAQD,WAGV,OAAO,gBAAC,EAAD,eAAUZ,SAAUY,EAAWE,OAAWH","sources":["webpack://emma/./node_modules/@lekoarts/gatsby-theme-emma/src/components/project-item.tsx","webpack://emma/./node_modules/@lekoarts/gatsby-theme-emma/src/components/projects.tsx","webpack://emma/./node_modules/@lekoarts/gatsby-theme-emma-core/src/templates/projects-query.tsx","webpack://emma/./node_modules/@lekoarts/gatsby-theme-emma/src/@lekoarts/gatsby-theme-emma-core/components/projects.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport { animated } from \"react-spring\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\n\ntype ProjectItemProps = {\n  node: {\n    color: string\n    title: string\n    slug: string\n    service: string\n    client: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n  style: any\n  eager?: boolean\n}\n\nconst ProjectItem = ({ node, style, eager }: ProjectItemProps) => (\n  <animated.div\n    sx={{\n      position: `relative`,\n      \"&:before\": {\n        content: `\"\"`,\n        display: `block`,\n        paddingTop: `100%`,\n      },\n    }}\n    style={style}\n  >\n    <div\n      sx={{\n        left: 0,\n        height: `100%`,\n        position: `absolute`,\n        top: 0,\n        width: `100%`,\n        a: {\n          color: `white`,\n          height: `100%`,\n          left: 0,\n          opacity: 0,\n          padding: 4,\n          position: `absolute`,\n          top: 0,\n          width: `100%`,\n          zIndex: 10,\n          transition: `all 0.3s ease-in-out`,\n          textDecoration: `none`,\n          \"&:hover\": {\n            color: `white`,\n            opacity: 1,\n            textDecoration: `none`,\n          },\n        },\n      }}\n    >\n      <div\n        sx={{\n          // @ts-ignore\n          \"> div\": {\n            height: `100%`,\n            left: 0,\n            position: `absolute !important`,\n            top: 0,\n            width: `100%`,\n            \"> div\": {\n              position: `static !important`,\n            },\n          },\n        }}\n      >\n        <GatsbyImage loading={eager ? `eager` : `lazy`} image={node.cover.childImageSharp.gatsbyImageData} alt=\"\" />\n      </div>\n      <Link to={node.slug} aria-label={`View detail page of ${node.title}`}>\n        <div\n          sx={{\n            backgroundColor: node.color,\n            height: `100%`,\n            left: 0,\n            position: `absolute`,\n            top: 0,\n            width: `100%`,\n            zIndex: -2,\n          }}\n        />\n        <div sx={{ fontSize: 5, fontWeight: `bold` }}>{node.client}</div>\n        <div sx={{ fontSize: 2 }}>{node.service}</div>\n      </Link>\n    </div>\n  </animated.div>\n)\n\nexport default ProjectItem\n","/** @jsx jsx */\nimport { jsx, Container, Themed } from \"theme-ui\"\nimport { useTrail } from \"react-spring\"\nimport { IGatsbyImageData } from \"gatsby-plugin-image\"\nimport Layout from \"./layout\"\nimport ProjectItem from \"./project-item\"\n\ntype ProjectsProps = {\n  projects: {\n    color: string\n    slug: string\n    title: string\n    service: string\n    client: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }[]\n  [key: string]: any\n}\n\nconst Projects = ({ projects }: ProjectsProps) => {\n  const trail = useTrail(projects.length, {\n    from: { height: `0%` },\n    to: { height: `100%` },\n  })\n\n  if (projects.length === 0) {\n    return (\n      <Layout>\n        <Container>\n          <Themed.p>\n            Hi!{` `}\n            <span role=\"img\" aria-label=\"Wave emoji\">\n              ðŸ‘‹\n            </span>\n            {` `}\n            <br />\n            Thanks for using <b>@lekoarts/gatsby-theme-emma</b>. You currently don't have any content in your{` `}\n            <i>projects</i> folder - that's why this page displays a placeholder text. Head over to the{` `}\n            <Themed.a href=\"https://github.com/LekoArts/gatsby-themes/tree/main/themes/gatsby-theme-emma\">\n              README\n            </Themed.a>\n            {` `}\n            to learn how to setup them.\n          </Themed.p>\n          <Themed.p>\n            <b>TL;DR:</b> <br />\n            The starter automatically created the folder <code>content/projects</code>. Go into this folder, create a\n            new folder called <code>example</code> and create an <code>index.mdx</code> file there and place an image.\n            Edit the frontmatter like described in the{` `}\n            <Themed.a href=\"https://github.com/LekoArts/gatsby-themes/tree/main/themes/gatsby-theme-emma\">\n              README\n            </Themed.a>\n            .\n          </Themed.p>\n        </Container>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout\n      sx={{\n        display: `grid`,\n        gridTemplateColumns: `repeat(auto-fit, minmax(280px, 1fr))`,\n        width: `100%`,\n      }}\n    >\n      {trail.map((style, index) => (\n        <ProjectItem style={style} eager={index === 0} node={projects[index]} key={projects[index].slug} />\n      ))}\n    </Layout>\n  )\n}\n\nexport default Projects\n","import { graphql } from \"gatsby\"\nimport ProjectsComponent from \"../components/projects\"\n\nexport default ProjectsComponent\n\nexport const query = graphql`\n  query {\n    allProject(sort: { fields: date, order: DESC }) {\n      nodes {\n        color\n        slug\n        service\n        client\n        title\n        cover {\n          childImageSharp {\n            gatsbyImageData(width: 850, quality: 90)\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Projects from \"../../../components/projects\"\n\ntype Props = {\n  data: {\n    allProject: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function EmmaCoreProjects({ ...props }: Props) {\n  const {\n    data: { allProject },\n  } = props\n\n  return <Projects projects={allProject.nodes} {...props} />\n}\n"],"names":["node","style","eager","animated","sx","position","content","display","paddingTop","left","height","top","width","a","color","opacity","padding","zIndex","transition","textDecoration","G","loading","image","cover","childImageSharp","gatsbyImageData","alt","Link","to","slug","title","backgroundColor","fontSize","fontWeight","client","service","projects","trail","useTrail","length","from","role","href","gridTemplateColumns","map","index","key","props","allProject","data","nodes"],"sourceRoot":""}